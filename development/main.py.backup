#!/usr/bin/env python3
"""
Main Entry Point for AI Agent 3D Print System

This is the main entry point that implements Task 5.1: Complete Workflow Implementation.
It provides a comprehensive end-to-end workflow orchestration system with:

- Complete workflow: User Input ‚Üí Research ‚Üí CAD ‚Üí Slicer ‚Üí Printer
- Robust error handling at each step 
- Rollback and cleanup functionality
- Progress tracking and user feedback
- End-to-end testing capability

Usage:
    python main.py                     # Interactive mode
    python main.py "Print a 2cm cube"  # Direct command
    python main.py --test              # Run end-to-end test
    python main.py --api               # Start API server (deprecated, use --web)
    python main.py --web               # Start API server and web interface
"""

import asyncio
import argparse
import logging
import sys
import traceback
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime
import webbrowser # Added for opening browser

# Add project root to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Core system imports
from core.parent_agent import ParentAgent, WorkflowState
from core.logger import get_logger
from core.exceptions import WorkflowError, ValidationError
from agents.research_agent import ResearchAgent
from agents.cad_agent import CADAgent
from agents.slicer_agent import SlicerAgent
from agents.printer_agent import PrinterAgent
from config.settings import load_config

# Imports for web server functionality
try:
    import uvicorn
    from fastapi import FastAPI
    from fastapi.staticfiles import StaticFiles
    from fastapi.templating import Jinja2Templates
    from api.main import app as api_app # Import the FastAPI app from api.main
    WEB_SERVER_ENABLED = True
except ImportError:
    WEB_SERVER_ENABLED = False
    api_app = None # type: ignore
    uvicorn = None # type: ignore
    StaticFiles = None # type: ignore
    Jinja2Templates = None # type: ignore
    # Print a more user-friendly message if imports fail
    print("Warning: FastAPI, Uvicorn, python-multipart, or Jinja2 not installed. --web functionality will be disabled.")
    print("Please run: pip install fastapi uvicorn python-multipart jinja2 aiofiles")


# Setup logging
logger = get_logger(__name__)


class WorkflowOrchestrator:
    """
    Complete workflow orchestrator for the AI Agent 3D Print System.
    
    Implements Task 5.1 requirements:
    - End-to-end workflow execution
    - Error handling with rollback
    - Progress tracking
    - Cleanup functionality
    """
    
    def __init__(self):
        """Initialize the workflow orchestrator."""
        self.config = load_config()
        self.parent_agent: Optional[ParentAgent] = None
        self.initialized = False
        
        # Agent instances for direct access
        self.research_agent: Optional[ResearchAgent] = None
        self.cad_agent: Optional[CADAgent] = None
        self.slicer_agent: Optional[SlicerAgent] = None
        self.printer_agent: Optional[PrinterAgent] = None
        
        # Workflow state
        self.current_workflow_id: Optional[str] = None
        self.cleanup_tasks = []
        
    async def initialize(self) -> None:
        """Initialize all agents and systems."""
        try:
            logger.info("üöÄ Initializing AI Agent 3D Print System...")
            
            # Initialize individual agents
            self.research_agent = ResearchAgent("research_agent")
            self.cad_agent = CADAgent("cad_agent")
            self.slicer_agent = SlicerAgent("slicer_agent")
            self.printer_agent = PrinterAgent("printer_agent")
            
            # Initialize parent agent
            self.parent_agent = ParentAgent("parent_agent")
            await self.parent_agent.startup()
            
            # Initialize agents with actual instances
            self.parent_agent._research_agent = self.research_agent
            self.parent_agent._cad_agent = self.cad_agent
            self.parent_agent._slicer_agent = self.slicer_agent
            self.parent_agent._printer_agent = self.printer_agent
            
            # Enable mock mode for testing
            self.slicer_agent.set_mock_mode(True)
            logger.info(f"Set slicer mock mode to: {self.slicer_agent.mock_mode}")
            
            # Register agents for communication
            self.parent_agent.register_agent("research_agent")
            self.parent_agent.register_agent("cad_agent")
            self.parent_agent.register_agent("slicer_agent")
            self.parent_agent.register_agent("printer_agent")
            
            self.initialized = True
            logger.info("‚úÖ System initialization completed successfully")
            
        except Exception as e:
            logger.error(f"‚ùå System initialization failed: {e}")
            logger.error(traceback.format_exc())
            raise
    
    async def execute_complete_workflow(
        self, 
        user_request: str,
        show_progress: bool = True
    ) -> Dict[str, Any]:
        """
        Execute the complete 3D printing workflow.
        
        Workflow steps:
        1. User Input ‚Üí Research Agent
        2. Research Result ‚Üí CAD Agent  
        3. STL File ‚Üí Slicer Agent
        4. G-Code ‚Üí Printer Agent
        5. Progress Updates ‚Üí User Interface
        
        Args:
            user_request: Natural language description of object to print
            show_progress: Whether to show progress updates
            
        Returns:
            Dict with workflow results and status
        """
        if not self.initialized:
            raise RuntimeError("System not initialized. Call initialize() first.")
        
        workflow_result = {
            "success": False,
            "workflow_id": None,
            "user_request": user_request,
            "start_time": datetime.now().isoformat(),
            "phases": {},
            "error_message": None,
            "files_generated": [],
            "cleanup_performed": False
        }
        
        try:
            logger.info(f"üéØ Starting complete workflow for: '{user_request}'")
            
            # Progress callback for user feedback
            async def progress_callback(progress_data: Dict[str, Any]):
                if show_progress:
                    percentage = progress_data.get('percentage', 0)
                    step = progress_data.get('current_step', 'Processing')
                    message = progress_data.get('message', '')
                    print(f"[{percentage:3.0f}%] {step}: {message}")
            
            # Create workflow
            workflow_id = await self.parent_agent.create_workflow(
                user_request, 
                progress_callback=progress_callback
            )
            self.current_workflow_id = workflow_id
            workflow_result["workflow_id"] = workflow_id
            
            if show_progress:
                print(f"üìã Created workflow: {workflow_id}")
            
            # Execute the complete workflow
            logger.info("üîÑ Executing complete workflow...")
            
            # Phase 1: Research and Concept Generation
            workflow_result["phases"]["research"] = await self._execute_research_phase(
                user_request, workflow_id, progress_callback
            )
            
            # Phase 2: CAD Model Generation
            workflow_result["phases"]["cad"] = await self._execute_cad_phase(
                workflow_result["phases"]["research"], workflow_id, progress_callback
            )
            
            # Phase 3: Slicing and G-code Generation
            workflow_result["phases"]["slicer"] = await self._execute_slicer_phase(
                workflow_result["phases"]["cad"], workflow_id, progress_callback
            )
            
            # Phase 4: 3D Printing
            workflow_result["phases"]["printer"] = await self._execute_printer_phase(
                workflow_result["phases"]["slicer"], workflow_id, progress_callback
            )
            
            # Mark as successful
            workflow_result["success"] = True
            workflow_result["end_time"] = datetime.now().isoformat()
            
            if show_progress:
                print("üéâ Workflow completed successfully!")
            
            logger.info("‚úÖ Complete workflow executed successfully")
            return workflow_result
            
        except Exception as e:
            logger.error(f"‚ùå Workflow execution failed: {e}")
            workflow_result["error_message"] = str(e)
            workflow_result["end_time"] = datetime.now().isoformat()
            
            # Perform rollback and cleanup
            await self._perform_rollback_and_cleanup(workflow_result)
            workflow_result["cleanup_performed"] = True
            
            if show_progress:
                print(f"‚ùå Workflow failed: {e}")
                print("üßπ Performing cleanup...")
            
            raise
    
    async def _execute_research_phase(
        self, 
        user_request: str, 
        workflow_id: str,
        progress_callback
    ) -> Dict[str, Any]:
        """Execute the research phase of the workflow."""
        logger.info(f"üî¨ Starting research phase for workflow {workflow_id}...")
        phase_result = {"status": "pending", "output": None, "error": None}
        try:
            # Use the correct method from ParentAgent
            research_output = await self.parent_agent.execute_research_workflow(
                user_request, progress_callback
            )
            phase_result["status"] = "completed"
            phase_result["output"] = research_output
            logger.info(f"‚úÖ Research phase completed for workflow {workflow_id}")
        except Exception as e:
            logger.error(f"‚ùå Research phase failed for workflow {workflow_id}: {e}")
            logger.error(traceback.format_exc())
            phase_result["status"] = "failed"
            phase_result["error"] = str(e)
            raise WorkflowError(f"Research phase failed: {e}") from e
        return phase_result

    async def _execute_cad_phase(
        self, 
        research_output: Dict[str, Any], 
        workflow_id: str,
        progress_callback
    ) -> Dict[str, Any]:
        """Execute the CAD generation phase of the workflow."""
        logger.info(f"üìê Starting CAD phase for workflow {workflow_id}...")
        phase_result = {"status": "pending", "output": None, "error": None}
        try:
            # Extract research data
            research_data = research_output.get("output", {})
            if not research_data:
                raise WorkflowError("Research data not found in research output.")

            # Use the correct method from ParentAgent
            cad_output = await self.parent_agent.execute_cad_workflow(
                research_data, progress_callback
            )
            phase_result["status"] = "completed"
            phase_result["output"] = cad_output
            logger.info(f"‚úÖ CAD phase completed for workflow {workflow_id}")
        except Exception as e:
            logger.error(f"‚ùå CAD phase failed for workflow {workflow_id}: {e}")
            logger.error(traceback.format_exc())
            phase_result["status"] = "failed"
            phase_result["error"] = str(e)
            raise WorkflowError(f"CAD phase failed: {e}") from e
        return phase_result
        
    async def _execute_slicer_phase(
        self, 
        cad_output: Dict[str, Any], 
        workflow_id: str,
        progress_callback
    ) -> Dict[str, Any]:
        """Execute the slicing phase of the workflow."""
        logger.info(f"ÔøΩ Starting slicer phase for workflow {workflow_id}...")
        phase_result = {"status": "pending", "output": None, "error": None}
        try:
            # Extract CAD data
            cad_data = cad_output.get("output", {})
            if not cad_data:
                raise WorkflowError("CAD data not found in CAD output.")

            # Use the correct method from ParentAgent
            slicer_output = await self.parent_agent.execute_slicer_workflow(
                cad_data, progress_callback
            )
            phase_result["status"] = "completed"
            phase_result["output"] = slicer_output
            logger.info(f"‚úÖ Slicer phase completed for workflow {workflow_id}")
        except Exception as e:
            logger.error(f"‚ùå Slicer phase failed for workflow {workflow_id}: {e}")
            logger.error(traceback.format_exc())
            phase_result["status"] = "failed"
            phase_result["error"] = str(e)
            raise WorkflowError(f"Slicer phase failed: {e}") from e
        return phase_result
        
    async def _execute_printer_phase(
        self, 
        slicer_output: Dict[str, Any], 
        workflow_id: str,
        progress_callback
    ) -> Dict[str, Any]:
        """Execute the printing phase of the workflow."""
        logger.info(f"üñ®Ô∏è Starting printer phase for workflow {workflow_id}...")
        phase_result = {"status": "pending", "output": None, "error": None}
        try:
            # Extract slicer data
            slicer_data = slicer_output.get("output", {})
            if not slicer_data:
                raise WorkflowError("Slicer data not found in slicer output.")

            # Use the correct method from ParentAgent
            printer_output = await self.parent_agent.execute_printer_workflow(
                slicer_data, progress_callback
            )
            phase_result["status"] = "completed"
            phase_result["output"] = printer_output
            logger.info(f"‚úÖ Printer phase completed for workflow {workflow_id}")
        except Exception as e:
            logger.error(f"‚ùå Printer phase failed for workflow {workflow_id}: {e}")
            logger.error(traceback.format_exc())
            phase_result["status"] = "failed"
            phase_result["error"] = str(e)
            raise WorkflowError(f"Printer phase failed: {e}") from e
        return phase_result

    async def _perform_rollback_and_cleanup(self, workflow_result: Dict[str, Any]) -> None:
        """Perform rollback and cleanup after workflow failure or completion."""
        try:
            logger.info("üßπ Performing cleanup and rollback...")
            
            # Clean up generated files
            import os
            files_cleaned = 0
            for cleanup_type, resource in self.cleanup_tasks:
                try:
                    if cleanup_type == "file" and os.path.exists(resource):
                        os.remove(resource)
                        files_cleaned += 1
                        logger.debug(f"Removed file: {resource}")
                except Exception as e:
                    logger.warning(f"Could not remove {resource}: {e}")
            
            # Reset workflow state
            if self.current_workflow_id and self.parent_agent:
                try:
                    await self.parent_agent.cancel_workflow(self.current_workflow_id)
                    logger.info(f"Cancelled workflow: {self.current_workflow_id}")
                except Exception as e:
                    logger.warning(f"Could not cancel workflow: {e}")
            
            # Clear cleanup tasks
            self.cleanup_tasks.clear()
            self.current_workflow_id = None
            
            logger.info(f"‚úÖ Cleanup completed - removed {files_cleaned} files")
            
        except Exception as e:
            logger.error(f"‚ùå Cleanup failed: {e}")
            # Don't raise here - cleanup failure shouldn't mask original error
    
    async def shutdown(self) -> None:
        """Shutdown the system gracefully."""
        try:
            logger.info("ÔøΩ Shutting down AI Agent 3D Print System...")
            
            # Perform final cleanup
            await self._perform_rollback_and_cleanup({})
            
            # Shutdown agents
            if self.parent_agent:
                await self.parent_agent.shutdown()
            
            logger.info("‚úÖ System shutdown completed")
            
        except Exception as e:
            logger.error(f"‚ùå Shutdown error: {e}")

            printer_output = await self.parent_agent.handle_printing(
                gcode_file_path, workflow_id, progress_callback
            )
            phase_result["status"] = "completed"
            phase_result["output"] = printer_output
            logger.info(f"‚úÖ Printer phase completed for workflow {workflow_id}")
        except Exception as e:
            logger.error(f"‚ùå Printer phase failed for workflow {workflow_id}: {e}")
            logger.error(traceback.format_exc())
            phase_result["status"] = "failed"
            phase_result["error"] = str(e)
            raise WorkflowError(f"Printer phase failed: {e}") from e
        return phase_result
        
    async def cleanup(self, workflow_id: Optional[str] = None) -> None:
        """
        Perform cleanup for the given workflow ID.
        
        Cleanup includes:
        - Removing generated files (STL, G-code)
        - Stopping any active printing
        - Cleaning up temporary resources
        - Resetting agent states
        """
        try:
            logger.info(f"üßπ Cleaning up workflow {workflow_id}...")
            
            # Stop any active printing
            if self.printer_agent:
                try:
                    # Emergency stop if printing
                    await self.printer_agent.execute_task({
                        "task_id": "emergency_stop",
                        "operation": "stop_print"
                    })
                    logger.info("üö® Emergency stop executed")
                except Exception as e:
                    logger.warning(f"Could not execute emergency stop: {e}")
            
            # Clean up generated files
            import os
            files_cleaned = 0
            for cleanup_type, resource in self.cleanup_tasks:
                try:
                    if cleanup_type == "file" and os.path.exists(resource):
                        os.remove(resource)
                        files_cleaned += 1
                        logger.debug(f"Removed file: {resource}")
                except Exception as e:
                    logger.warning(f"Could not remove {resource}: {e}")
            
            # Reset workflow state
            if self.current_workflow_id and self.parent_agent:
                try:
                    await self.parent_agent.cancel_workflow(self.current_workflow_id)
                    logger.info(f"Cancelled workflow: {self.current_workflow_id}")
                except Exception as e:
                    logger.warning(f"Could not cancel workflow: {e}")
            
            # Clear cleanup tasks
            self.cleanup_tasks.clear()
            self.current_workflow_id = None
            
            logger.info(f"‚úÖ Cleanup completed - removed {files_cleaned} files")
            
        except Exception as e:
            logger.error(f"‚ùå Cleanup failed: {e}")
            # Don't raise here - cleanup failure shouldn't mask original error
    
    async def shutdown(self) -> None:
        """Shutdown the system gracefully."""
        try:
            logger.info("üîΩ Shutting down AI Agent 3D Print System...")
            
            # Perform final cleanup
            await self._perform_rollback_and_cleanup({})
            
            # Shutdown agents
            if self.parent_agent:
                await self.parent_agent.shutdown()
            
            logger.info("‚úÖ System shutdown completed")
            
        except Exception as e:
            logger.error(f"‚ùå Shutdown error: {e}")


async def run_end_to_end_test() -> bool:
    """
    Run the end-to-end test: "Print a 2cm cube".
    
    This test validates the complete workflow implementation
    as required by Task 5.1.
    
    Returns:
        True if test passes, False otherwise
    """
    print("üß™ Running End-to-End Test: 'Print a 2cm cube'")
    print("=" * 60)
    
    orchestrator = WorkflowOrchestrator()
    
    try:
        # Initialize system
        await orchestrator.initialize()
        
        # Execute the test workflow
        result = await orchestrator.execute_complete_workflow(
            "Print a 2cm cube",
            show_progress=True
        )
        
        # Validate results
        if result["success"]:
            print("\n‚úÖ End-to-End Test PASSED!")
            print(f"   - Workflow ID: {result['workflow_id']}")
            print(f"   - All phases completed successfully")
            print(f"   - Duration: {result.get('end_time', 'N/A')}")
            
            # Check that all phases executed
            phases = result.get("phases", {})
            required_phases = ["research", "cad", "slicer", "printer"]
            
            for phase in required_phases:
                if phase in phases and phases[phase].get("success"):
                    print(f"   ‚úÖ {phase.capitalize()} phase: SUCCESS")
                else:
                    print(f"   ‚ùå {phase.capitalize()} phase: FAILED")
                    return False
            
            return True
        else:
            print(f"\n‚ùå End-to-End Test FAILED: {result.get('error_message', 'Unknown error')}")
            return False
            
    except Exception as e:
        print(f"\n‚ùå End-to-End Test FAILED: {e}")
        logger.error(f"Test failed: {e}")
        logger.error(traceback.format_exc())
        return False
    
    finally:
        await orchestrator.shutdown()


async def run_interactive_mode():
    """Run the system in interactive mode."""
    print("ü§ñ AI Agent 3D Print System - Interactive Mode")
    print("=" * 50)
    print("Enter natural language descriptions of objects to print.")
    print("Type 'quit' or 'exit' to stop.")
    print()
    
    orchestrator = WorkflowOrchestrator()
    
    try:
        await orchestrator.initialize()
        
        while True:
            try:
                user_input = input("What would you like to print? ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'q']:
                    break
                
                if not user_input:
                    continue
                
                print(f"\nüéØ Processing request: '{user_input}'")
                print("-" * 40)
                
                result = await orchestrator.execute_complete_workflow(
                    user_input,
                    show_progress=True
                )
                
                if result["success"]:
                    print(f"\nüéâ Request completed successfully!")
                    print(f"Workflow ID: {result['workflow_id']}")
                else:
                    print(f"\n‚ùå Request failed: {result.get('error_message', 'Unknown error')}")
                
                print("\n" + "=" * 50)
                
            except KeyboardInterrupt:
                print("\n\nüëã Interrupted by user")
                break
            except Exception as e:
                print(f"\n‚ùå Error processing request: {e}")
                logger.error(f"Interactive mode error: {e}")
    
    finally:
        await orchestrator.shutdown()


async def start_api_mode():
    """Start the API server mode."""
    print("üåê Starting API Server Mode...")
    
    try:
        import uvicorn
        from api.main import app
        
        # Run the FastAPI server
        config = uvicorn.Config(
            app=app,
            host="0.0.0.0",
            port=8000,
            log_level="info"
        )
        server = uvicorn.Server(config)
        await server.serve()
        
    except ImportError:
        print("‚ùå FastAPI/uvicorn not available. Install with: pip install fastapi uvicorn")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå API server failed: {e}")
        logger.error(f"API server error: {e}")
        sys.exit(1)


async def detect_and_list_printers():
    """Detect and list available 3D printers."""
    print("üîç Detecting available 3D printers...")
    print("=" * 50)
    
    try:
        # Import PrinterAgent for detection functionality
        printer_agent = PrinterAgent("printer_detector")
        
        # Detect printers
        detected_printers = await printer_agent._detect_printers()
        
        if detected_printers:
            print(f"‚úÖ Found {len(detected_printers)} potential 3D printer(s):")
            print()
            
            for i, printer_info in enumerate(detected_printers, 1):
                port = printer_info.get('port', 'Unknown')
                description = printer_info.get('description', 'No description')
                manufacturer = printer_info.get('manufacturer', 'Unknown')
                product = printer_info.get('product', 'Unknown')
                
                print(f"{i}. Serial Port: {port}")
                print(f"   Description: {description}")
                print(f"   Manufacturer: {manufacturer}")
                print(f"   Product: {product}")
                print()
            
            print("üí° To use a detected printer:")
            print(f"   python main.py --web --use-real-printer --printer-port {detected_printers[0].get('port', '/dev/ttyUSB0')}")
            print()
            print("üìù Or update config/settings.yaml:")
            print("   printer:")
            print("     enabled: true")
            print("     mock_mode: false")
            print("     serial:")
            print(f"       port: \"{detected_printers[0].get('port', '/dev/ttyUSB0')}\"")
            print("       baudrate: 115200")
            
        else:
            print("‚ùå No 3D printers detected.")
            print()
            print("üîß Troubleshooting:")
            print("1. Make sure your 3D printer is connected via USB")
            print("2. Check that the printer is powered on")
            print("3. Verify USB cable is working")
            print("4. Try running: ls -la /dev/tty* | grep -E '(USB|ACM)'")
            print("5. Check USB devices: lsusb")
        
        print("\n" + "=" * 50)
        
    except Exception as e:
        print(f"‚ùå Error during printer detection: {e}")
        logger.error(f"Printer detection failed: {e}")
        return False
    
    return True


async def configure_printer_settings(args):
    """Configure printer settings based on command line arguments."""
    config = load_config()
    
    # Apply command line overrides
    changes_made = False
    
    if args.use_real_printer:
        if config.get('printer', {}).get('mock_mode', True):
            print("üîß Configuring for real printer mode...")
            config.setdefault('printer', {})['mock_mode'] = False
            changes_made = True
    
    if args.printer_port:
        print(f"üîß Setting printer port to: {args.printer_port}")
        config.setdefault('printer', {}).setdefault('serial', {})['port'] = args.printer_port
        changes_made = True
    
    if args.baudrate != 115200:  # Only change if different from default
        print(f"üîß Setting printer baudrate to: {args.baudrate}")
        config.setdefault('printer', {}).setdefault('serial', {})['baudrate'] = args.baudrate
        changes_made = True
    
    if changes_made:
        print("‚úÖ Printer configuration updated for this session")
        # Note: We don't write back to the config file, just use in-memory changes
        # Users should update config/settings.yaml for persistent changes
    
    return config


async def main():
    """Main function to run the AI Agent 3D Print System."""
    parser = argparse.ArgumentParser(description="AI Agent 3D Print System")
    parser.add_argument("request", nargs='?', help="User request for 3D printing (e.g., 'Print a 2cm cube')")
    parser.add_argument("--test", action="store_true", help="Run end-to-end test workflow")
    parser.add_argument("--api", action="store_true", help="Start API server (deprecated, use --web)")
    parser.add_argument("--web", action="store_true", help="Start API server and web interface")
    parser.add_argument("--port", type=int, default=8000, help="Port for the web server")
    parser.add_argument("--host", type=str, default="127.0.0.1", help="Host for the web server")
    parser.add_argument("--printer-port", type=str, help="Serial port for 3D printer (e.g., /dev/ttyUSB0)")
    parser.add_argument("--baudrate", type=int, default=115200, help="Baud rate for printer communication")
    parser.add_argument("--use-real-printer", action="store_true", help="Use real printer instead of mock mode")
    parser.add_argument("--detect-printers", action="store_true", help="Detect available 3D printers and exit")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose logging")


    args = parser.parse_args()

    # Handle printer detection first (early exit)
    if args.detect_printers:
        success = await detect_and_list_printers()
        sys.exit(0 if success else 1)
    
    # Configure printer settings based on command line arguments
    if args.use_real_printer or args.printer_port or args.baudrate != 115200:
        updated_config = await configure_printer_settings(args)

    if args.api:
        print("Warning: --api is deprecated. Use --web to start the API server and web interface.")
        args.web = True # Treat --api as --web

    if args.web:
        if not WEB_SERVER_ENABLED or not api_app or not uvicorn or not StaticFiles or not Jinja2Templates:
            logger.error("Web server components are not available. Please install FastAPI, Uvicorn, python-multipart, Jinja2 and aiofiles.")
            sys.exit(1)
        
        logger.info(f"üöÄ Starting web server and API on http://{args.host}:{args.port}")
        if args.use_real_printer:
            logger.info(f"   Printer Mode: REAL (Port: {args.printer_port or 'from config'})")
        else:
            logger.info(f"   Printer Mode: MOCK")
        
        # Mount static files
        static_dir = project_root / "static"
        if not static_dir.exists():
            logger.warning(f"Static directory not found: {static_dir}. Frontend might not load correctly.")
        else:
            # Ensure aiofiles is installed for StaticFiles for full async support
            api_app.mount("/static", StaticFiles(directory=static_dir, check_dir=True), name="static")

        web_dir = project_root / "web"
        if web_dir.exists() and web_dir.is_dir():
             logger.info(f"Found 'web' directory: {web_dir}. Mounting web assets.")
             # Mount web directory assets (CSS, JS, etc.) under /web
             api_app.mount("/web", StaticFiles(directory=web_dir, check_dir=True), name="web")

        templates_dir = project_root / "templates"
        if not templates_dir.exists():
            logger.warning(f"Templates directory not found: {templates_dir}. HTML templating might not work.")
        # else:
            # Templates are typically used within specific route handlers in FastAPI, not globally mounted like static files.
            # The api.main.app or its routers would configure Jinja2Templates if they serve HTML from templates.
            # Example: templates = Jinja2Templates(directory=str(templates_dir))
            # And then in a route: return templates.TemplateResponse("index.html", {"request": request})
            # For now, we assume the primary frontend is in static/index.html or handled by client-side routing.

        try:
            config = uvicorn.Config(app=api_app, host=args.host, port=args.port, log_level="info", lifespan="on")
            server = uvicorn.Server(config)
            
            # Create a task for the server to run in the background
            server_task = asyncio.create_task(server.serve())
            
            # Give the server a moment to start before opening the browser
            await asyncio.sleep(1) # Adjust delay as needed
            
            if args.host == "0.0.0.0":
                # If listening on all interfaces, try to open with localhost for convenience
                display_host = "127.0.0.1"
            else:
                display_host = args.host
            
            print(f"Web server starting. Attempting to open browser to http://{display_host}:{args.port}")
            try:
                webbrowser.open_new_tab(f"http://{display_host}:{args.port}")
            except Exception as e:
                logger.warning(f"Could not open browser automatically: {e}. Please open it manually.")

            await server_task # Wait for the server task to complete (e.g., on shutdown)
            
        except KeyboardInterrupt:
            logger.info("Web server stopped by user.")
        except Exception as e:
            logger.error(f"Failed to start or run web server: {e}")
            logger.error(traceback.format_exc())
            sys.exit(1)
        
        return # Exit after starting server

    orchestrator = WorkflowOrchestrator()
    parser = argparse.ArgumentParser(
        description="AI Agent 3D Print System - Complete Workflow Implementation"
    )
    parser.add_argument(
        "request", 
        nargs="?", 
        help="Direct natural language request (e.g., 'Print a 2cm cube')"
    )
    parser.add_argument(
        "--test", 
        action="store_true", 
        help="Run end-to-end test"
    )
    parser.add_argument(
        "--api", 
        action="store_true", 
        help="Start API server (deprecated, use --web)"
    )
    parser.add_argument(
        "--web", 
        action="store_true", 
        help="Start API server and web interface"
    )
    parser.add_argument(
        "--verbose", 
        action="store_true", 
        help="Enable verbose logging"
    )
    
    args = parser.parse_args()
    
    # Configure logging level
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    try:
        if args.test:
            # Run end-to-end test
            success = await run_end_to_end_test()
            sys.exit(0 if success else 1)
        
        elif args.api:
            # Start API server (deprecated, same as --web)
            print("Note: --api is deprecated. Starting web interface...")
            # Fall through to normal workflow, as --api was already converted to --web above
        
        elif args.request:
            # Process direct request
            orchestrator = WorkflowOrchestrator()
            try:
                await orchestrator.initialize()
                result = await orchestrator.execute_complete_workflow(
                    args.request,
                    show_progress=True
                )
                
                if result["success"]:
                    print(f"\nüéâ Successfully completed: '{args.request}'")
                    sys.exit(0)
                else:
                    print(f"\n‚ùå Failed to complete: '{args.request}'")
                    print(f"Error: {result.get('error_message', 'Unknown error')}")
                    sys.exit(1)
            finally:
                await orchestrator.shutdown()
        
        else:
            # Interactive mode
            await run_interactive_mode()
    
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå System error: {e}")
        logger.error(f"Main error: {e}")
        logger.error(traceback.format_exc())
        sys.exit(1)


if __name__ == "__main__":
    print("üöÄ AI Agent 3D Print System")
    print("Task 5.1: Complete Workflow Implementation")
    print("=" * 50)
    
    asyncio.run(main())
